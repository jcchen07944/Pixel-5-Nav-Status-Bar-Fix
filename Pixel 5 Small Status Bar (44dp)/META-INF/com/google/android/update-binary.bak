#!/sbin/sh
##########################################################################################
#
# Magisk Boot Image Patcher
# by topjohnwu
# 
# This zip will patch your boot image with Magisk support
#
##########################################################################################

TMPDIR=/dev/tmp
MOUNTPATH=/dev/magisk_img
MYTMPDIR=/data/tmp

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
rm -rf $MYTMPDIR 2>/dev/null
mkdir -p $TMPDIR
mkdir -p $MYTMPDIR

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************************"
  ui_print " Please install the latest Magisk! "
  ui_print "***********************************"
  exit 1
}

imageless_magisk() {
  [ $MAGISK_VER_CODE -gt 18100 ]
  return $?
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

# Load utility functions
if [ -f /data/adb/magisk/util_functions.sh ]; then
  . /data/adb/magisk/util_functions.sh
  NVBASE=/data/adb
else
  require_new_magisk
fi

# Preperation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2
unzip -qq -o "$ZIPFILE" -d $MYTMPDIR

[ ! -f $TMPDIR/install.sh ] && abort "! Unable to extract zip file!"
# Load install script
. $TMPDIR/install.sh

if imageless_magisk; then
  $BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
  MODULEROOT=$NVBASE/$MODDIRNAME
else
  $BOOTMODE && IMGNAME=magisk_merge.img || IMGNAME=magisk.img
  IMG=$NVBASE/$IMGNAME
  request_zip_size_check "$ZIPFILE"
  mount_magisk_img
  MODULEROOT=$MOUNTPATH
fi

MODID=`grep_prop id $TMPDIR/module.prop`
MODPATH=$MODULEROOT/$MODID

print_modname

ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH
unzip -o "$ZIPFILE" 'system/*' -d $MODPATH >&2
unzip -oj "$ZIPFILE" /data/tmp


##########################################################################################
# EVilTheme Mod integrated by djb77
##########################################################################################
OUTFD=/proc/self/fd/$2;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }


file_getprop() { grep "^$2=" "$1" | cut -d= -f2; }
if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop $root/system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
fi;

#####################################
ui_print "     ";
ui_print "        ############################";
ui_print "        #      VRTheme Theme       #";
ui_print "        #     and Mod Flasher      #";
ui_print "        ############################";
ui_print "        #        Tulsadiver        #";
ui_print "        #      @XDA Developers     #";
ui_print "        ############################";
ui_print "     ";

sleep 3

bin=/data/tmp; 
chmod -R 755 $bin;

bb=/data/tmp/busybox

# function to select file locations based on rom version
set_paths(){
  dir="/$1"
	apk="$1.apk"
	dex="@$1"

}

minit='/data/app'
minitdir=$(find $minit -type d -name "com.three.minit.batteryresources")


# find which recovery is being used
cwm_run=$(ps | grep -v "grep" | grep -o -E "update_binary(.*)" | cut -d " " -f 3);
twrp_run=$(ps | grep -v "grep" | grep -o -E "updater(.*)" | cut -d " " -f 3);
if [ "$cwm_run" ]; then
	recovery_binary=$cwm_run
else
if [ "$twrp_run" ]; then
	recovery_binary=$twrp_run
fi
fi

# repeat for /system/product/priv-app
path_magisk=/data/tmp/magisk_tmp
[ -d /data/tmp/vrtheme/system/product/priv-app ] && systemprivapps=1 || systemprivapps=0
if [ "$systemprivapps" -eq "1" ]; then
cd /data/tmp/vrtheme/system/product/priv-app/
ui_print "          Processing /system/product/priv-app"
for f in $(ls)
do
	set_paths $f
	ui_print "             $apk"
  $bb mkdir -p $path_magisk/system/product/priv-app$dir/
	$bb mkdir -p /data/tmp/ozop/system/product/priv-app$dir
	$bb mkdir -p /data/tmp/vrtheme/apply/system/product/priv-app$dir/aligned
# get apk
  cp /system/product/priv-app$dir/$apk /data/tmp/vrtheme/apply/system/product/priv-app$dir/
# backup apk
	cp /system/product/priv-app$dir/$apk /data/tmp/ozop/system/product/priv-app$dir/
# patch apk
	cd /data/tmp/vrtheme/system/product/priv-app$dir/$apk/
  /data/tmp/vrtheme/zip -qq -r /data/tmp/vrtheme/apply/system/product/priv-app$dir/$apk *
# zipalign apk
	cd /data/tmp/vrtheme/apply/system/product/priv-app$dir/
	/data/tmp/vrtheme/zipalign -f 4 $apk aligned/$apk
# move apk back
  #cp -rf aligned/$apk /system/product/priv-app$dir/
  cp -rf aligned/$apk $path_magisk/system/product/priv-app$dir/
	chmod 0644 /system/product/priv-app$dir/$apk
# delete dalvik-cache entry if it exists
	dc_file=/data/dalvik-cache/arm/system@priv-app$dex@$apk@classes.dex
	if [ -f $dc_file ]; then
		rm -f $dc_file
	fi
done
fi

sleep 3

# repeat for /system/product/overlay
path_magisk=/data/tmp/magisk_tmp
[ -d /data/tmp/vrtheme/system/product/overlay ] && systemoverlays=1 || systemoverlays=0
if [ "$systemoverlays" -eq "1" ]; then
cd /data/tmp/vrtheme/system/product/overlay/
ui_print "          Processing /system/product/overlay"
for f in $(ls)
do
	set_paths $f
	ui_print "             $apk"
  $bb mkdir -p $path_magisk/system/product/overlay$dir/
	$bb mkdir -p /data/tmp/ozop/system/product/overlay$dir
	$bb mkdir -p /data/tmp/vrtheme/apply/system/product/overlay$dir/aligned
# get apk
  cp /system/product/overlay$dir/$apk /data/tmp/vrtheme/apply/system/product/overlay$dir/
# backup apk
	cp /system/product/overlay$dir/$apk /data/tmp/ozop/system/product/overlay$dir/
# patch apk
	cd /data/tmp/vrtheme/system/product/overlay$dir/$apk/
  /data/tmp/vrtheme/zip -qq -r /data/tmp/vrtheme/apply/system/product/overlay$dir/$apk *
# zipalign apk
	cd /data/tmp/vrtheme/apply/system/product/overlay$dir/
	/data/tmp/vrtheme/zipalign -f 4 $apk aligned/$apk
# move apk back
  #cp -rf aligned/$apk /system/product/overlay$dir/
  cp -rf aligned/$apk $path_magisk/system/product/overlay$dir/
	chmod 0644 /system/product/overlay$dir/$apk
# delete dalvik-cache entry if it exists
	dc_file=/data/dalvik-cache/arm/system@overlay$dex@$apk@classes.dex
	if [ -f $dc_file ]; then
		rm -f $dc_file
	fi
done
fi

sleep 3

# repeat for /system/framework
path_magisk=/data/tmp/magisk_tmp
[ -d /data/tmp/vrtheme/system/framework ] && framework=1 || framework=0
if [ "$framework" -eq "1" ]; then
  $bb mkdir -p $path_magisk/system/framework/
  $bb mkdir -p /data/tmp/ozop/system/framework
	$bb mkdir -p /data/tmp/vrtheme/apply/system/framework/aligned
cd /data/tmp/vrtheme/system/framework
ui_print "          Processing /system/framework"
for f in $(ls)
do
	ui_print "             $f"
# get apk
  cp /system/framework/$f /data/tmp/vrtheme/apply/system/framework/
# backup apk
  cp /system/framework/$f /data/tmp/ozop/system/framework/
# patch apk
  cd /data/tmp/vrtheme/system/framework/$f/
  /data/tmp/vrtheme/zip -qq -r /data/tmp/vrtheme/apply/system/framework/$f *
# zipalign apk
	cd /data/tmp/vrtheme/apply/system/framework/
# busybox mkdir aligned
	/data/tmp/vrtheme/zipalign -f 4 $f aligned/$f
# move apk back
  #cp -rf aligned/$f /system/framework/
  cp -rf aligned/$f $path_magisk/system/framework/
	chmod 644 /system/framework/$f
done
fi

sleep 3

# repeat for /data/app
path_magisk=/data/tmp/magisk_tmp
[ -d /data/tmp/vrtheme/data/app ] && apps=1 || apps=0
if [ "$apps" -eq "1" ]; then
    $bb mkdir -p $path_magisk/data/app
	$bb mkdir -p /data/tmp/vrtheme/apply/data/app/aligned
	minit='/data/app'
    minitdir=$(find $minit -type d -name "com.three.minit.batteryresources")
	3minit="$minitdir/base.apk"
cd /data/tmp/vrtheme/data/app
ui_print "          Processing /data/app"
for f in $(ls)
do
	ui_print "             $apk"
# get apk
  cp $minitdir/$apk /data/tmp/vrtheme/apply/data/app/
# patch apk
  cd /data/tmp/vrtheme/data/app/$apk/
  /data/tmp/vrtheme/zip -qq -r /data/tmp/vrtheme/apply/data/app/$apk *
# zipalign apk
	cd /data/tmp/vrtheme/apply/data/app/
# busybox mkdir aligned
	/data/tmp/vrtheme/zipalign -f 4 $apk aligned/$apk
# move apk back
  #cp -rf aligned/$apk $minitdir
  cp -rf aligned/$apk $path_magisk/data/app/
	chmod 644 /data/app/$apk
done
fi

# Copy Patched Files to Magisk Module
ui_print "- Copying Patched Files to Magisk Module"
cp -rf /data/tmp/magisk_tmp/* $MODPATH
#cp -rf /data/tmp/magisk_tmp/* /data/tmp/mysystem

# cleanup work files
ui_print "     Cleaning up work files"
ui_print "         ";

sleep 3

#$bb rm -fR /sdcard/vrthemeADBmagisk
$bb rm -fR /data/tmp

##########################################################################################

# Remove placeholder
rm -f $MODPATH/system/placeholder 2>/dev/null

# Custom uninstaller
[ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh


## Auto Mount
if imageless_magisk; then
  $SKIPMOUNT && touch $MODPATH/skip_mount
else
  $SKIPMOUNT || touch $MODPATH/auto_mount
fi

# prop files
$PROPFILE && cp -af $TMPDIR/system.prop $MODPATH/system.prop

# Module info
cp -af $TMPDIR/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  if imageless_magisk; then
    mktouch $NVBASE/modules/$MODID/update
    cp -af $TMPDIR/module.prop $NVBASE/modules/$MODID/module.prop
  else
    mktouch /sbin/.magisk/img/$MODID/update
    cp -af $TMPDIR/module.prop /sbin/.magisk/img/$MODID/module.prop
  fi
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

# service mode scripts
$LATESTARTSERVICE && cp -af $TMPDIR/service.sh $MODPATH/service.sh

on_install

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

ui_print "- Setting permissions"
set_permissions

recovery_cleanup() {
  mv /sbin_tmp /sbin 2>/dev/null
  [ -z $OLD_PATH ] || export PATH=$OLD_PATH
  [ -z $OLD_LD_LIB ] || export LD_LIBRARY_PATH=$OLD_LD_LIB
  [ -z $OLD_LD_PRE ] || export LD_PRELOAD=$OLD_LD_PRE
  ui_print "- Unmounting partitions"
  umount -l /system_root 2>/dev/null
  umount -l /system 2>/dev/null
  umount -l /dev/random 2>/dev/null
}

unmount_magisk_img() {
  check_filesystem $IMG $MOUNTPATH
  newSizeM=$((curUsedM / 32 * 32 + 64))
  $MAGISKBIN/magisk imgtool umount $MOUNTPATH $MAGISKLOOP
  if [ $curSizeM -gt $newSizeM ]; then
    ui_print "- Shrinking $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk imgtool resize $IMG $newSizeM >&2
  fi
}

##########################################################################################
# Finalizing
##########################################################################################

cd /
imageless_magisk || unmount_magisk_img
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR $MOUNTPATH

ui_print "- Done"
exit 0
